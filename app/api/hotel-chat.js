import { supabase } from "@/app/lib/supabaseClient";
import OpenAI from "openai";


const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });


export default async function handler(req, res) {
    if (req.method !== "POST") {
      return res.status(405).json({ error: "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" });
    }
  
    const { messages } = req.body;
  
    try {
      // –®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É OpenAI —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
      const chatResponse = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          { role: "system", content: "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –æ—Ç–µ–ª–µ–π. –£—Ç–æ—á–Ω—è–π –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π." },
          ...messages,
        ],
      });
  
      const reply = chatResponse.choices[0].message.content;
  
      // –®–∞–≥ 2: –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏—â–µ–º –æ—Ç–µ–ª–∏
      if (reply.includes("–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")) {
        const { data: hotels, error } = await supabase
          .from("hotels")
          .select("*")
          .limit(3); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)
  
        if (error) throw error;
  
        const hotelList = hotels.map(hotel => `üè® *${hotel.name}* - ${hotel.price}$, ${hotel.stars}‚≠ê`).join("\n");
  
        return res.status(200).json({ reply: `–í–æ—Ç –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n${hotelList}` });
      }
  
      // –®–∞–≥ 3: –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
      res.status(200).json({ reply });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ OpenAI:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞" });
    }
  }